type Game {
  categories: [Category!]
  contestants: [Contestant!]
  emcee: String!
  gameId: Int!
  title: String!
}

type Category {
  categoryName: String!
  catgId: Int!
  gameId: Int!
  questions: [Question!]
}

type Question {
  answer: String!
  catgId: Int!
  points: Int!
  quesId: Int!
  categoryName: String!
  question: String!
  state: StateEnum!
}

type Contestant @aws_api_key @aws_cognito_user_pools {
  gameId: Int!
  login: String!
  name: String!
  organization: String
  score: Int!
}

type Nominee @aws_api_key @aws_cognito_user_pools {
  login: String!
  name: String!
  organization: String
  quesId: Int!
  timebuzzed: Int!
}

enum StateEnum {
  closed
  display
  open
  ready
}

type Query {
  getGameById(gameId: Int!): Game
  getQuestionByQuesId(quesId: Int!): Question
  listContestants: [Contestant!]!
    @aws_api_key
    @aws_cognito_user_pools
  listGames: [Game!]
  listGamesByEmcee(emcee: String!): [Game!]
}

type Mutation {
  addContestantScore(gameId: Int!, increment: Int!, login: String!): Contestant!
    @aws_cognito_user_pools(cognito_groups: ["emcee"])

  joinGame(gameId: Int!): Contestant!

  adminJoinGame(gameId: Int!, login: String!, name: String!, organization: String!): Contestant!
  @aws_api_key

  leaveGame(gameId: Int!, login: String!): Contestant!  @aws_api_key
  nominateSelf(quesId: Int!): Nominee!
  nominateContestant(
    login: String!
    name: String!
    organization: String!
    quesId: Int!
  ): Nominee!
    @aws_api_key

  removeNominee(login: String!, quesId: Int!): Nominee!
    @aws_cognito_user_pools(cognito_groups: ["emcee"])

  setQuestionState(catgId: Int!, quesId: Int!, state: StateEnum!): Question!
    @aws_cognito_user_pools(cognito_groups: ["emcee"])
}

type Subscription {
  contestantHasJoinedTheGame: Contestant
		@aws_subscribe(mutations: [ "joinGame", "adminJoinGame" ])
  contestantHasLeftTheGame: Contestant
		@aws_subscribe(mutations: ["leaveGame"])
  addContestantScore: Contestant
    @aws_subscribe(mutations: ["addContestantScore"])
  nominateContestant: Nominee
    @aws_subscribe(mutations: [ "nominateSelf", "nominateContestant" ])
  questionStateChange: Question
    @aws_subscribe(mutations: ["setQuestionState"])
  removeNominee: Nominee
    @aws_subscribe(mutations: ["removeNominee"])
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
